CCS PCM C Compiler, Version 5.061, 56587               05-ago-22 19:46

               Filename:   C:\Users\Beto_Business\Desktop\Medição Remota - Julho\Transmissor - PIC - Temporizado\main.lst

               ROM used:   286 words (28%)
                           Largest free fragment is 738
               RAM used:   27 (12%) at main() level
                           35 (16%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   099
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   7F,W
0009:  MOVWF  20
000A:  MOVF   0A,W
000B:  MOVWF  27
000C:  CLRF   0A
000D:  SWAPF  20,F
000E:  MOVF   04,W
000F:  MOVWF  22
0010:  MOVF   77,W
0011:  MOVWF  23
0012:  MOVF   78,W
0013:  MOVWF  24
0014:  MOVF   79,W
0015:  MOVWF  25
0016:  MOVF   7A,W
0017:  MOVWF  26
0018:  BCF    03.7
0019:  BCF    03.5
001A:  BTFSS  0B.4
001B:  GOTO   01E
001C:  BTFSC  0B.1
001D:  GOTO   02F
001E:  MOVF   22,W
001F:  MOVWF  04
0020:  MOVF   23,W
0021:  MOVWF  77
0022:  MOVF   24,W
0023:  MOVWF  78
0024:  MOVF   25,W
0025:  MOVWF  79
0026:  MOVF   26,W
0027:  MOVWF  7A
0028:  MOVF   27,W
0029:  MOVWF  0A
002A:  SWAPF  21,W
002B:  MOVWF  03
002C:  SWAPF  7F,F
002D:  SWAPF  7F,W
002E:  RETFIE
.................... #include <16F627A.h> 
.................... //////////// Standard Header file for the PIC16F627A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F627A 
*
0067:  BTFSC  3D.7
0068:  GOTO   07A
0069:  MOVLW  0F
006A:  MOVWF  77
006B:  SWAPF  3C,W
006C:  ANDWF  77,F
006D:  MOVLW  0A
006E:  SUBWF  77,W
006F:  BTFSC  03.0
0070:  GOTO   074
0071:  MOVLW  30
0072:  ADDWF  77,F
0073:  GOTO   076
0074:  MOVF   3D,W
0075:  ADDWF  77,F
0076:  MOVF   77,W
0077:  BTFSS  0C.4
0078:  GOTO   077
0079:  MOVWF  19
007A:  MOVLW  0F
007B:  ANDWF  3C,F
007C:  MOVLW  0A
007D:  SUBWF  3C,W
007E:  BTFSC  03.0
007F:  GOTO   082
0080:  MOVLW  30
0081:  GOTO   084
0082:  BCF    3D.7
0083:  MOVF   3D,W
0084:  ADDWF  3C,F
0085:  MOVF   3C,W
0086:  BTFSS  0C.4
0087:  GOTO   086
0088:  MOVWF  19
....................  
.................... #list 
....................  
....................  
.................... #FUSES NOMCLR                   //Master Clear pin used for I/O 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=8MHz) 
*
0034:  MOVLW  3A
0035:  MOVWF  04
0036:  BCF    03.7
0037:  MOVF   00,W
0038:  BTFSC  03.2
0039:  GOTO   047
003A:  MOVLW  02
003B:  MOVWF  78
003C:  CLRF   77
003D:  DECFSZ 77,F
003E:  GOTO   03D
003F:  DECFSZ 78,F
0040:  GOTO   03C
0041:  MOVLW  97
0042:  MOVWF  77
0043:  DECFSZ 77,F
0044:  GOTO   043
0045:  DECFSZ 00,F
0046:  GOTO   03A
0047:  RETURN
.................... #use rs232(baud=1200,parity=N,xmit=PIN_B2,rcv=PIN_B1,bits=8,stream=PORT1) 
....................  
.................... #use FIXED_IO( A_outputs=PIN_A7,PIN_A6,PIN_A5,PIN_A4,PIN_A3,PIN_A2,PIN_A1,PIN_A0 ) 
.................... #use FIXED_IO( B_outputs=PIN_B7,PIN_B6,PIN_B5,PIN_B4,PIN_B3,PIN_B2,PIN_B1 ) 
....................  
....................  
.................... const char * ip = "M0001"; 
*
00AF:  MOVLW  4D
00B0:  MOVWF  28
00B1:  MOVLW  30
00B2:  MOVWF  29
00B3:  MOVWF  2A
00B4:  MOVWF  2B
00B5:  MOVLW  31
00B6:  MOVWF  2C
00B7:  CLRF   2D
.................... int consumo = 0; 
.................... char sistema = '1'; 
.................... int high = 0; 
.................... int low = 0; 
.................... int contador = 0; 
....................  
.................... #INT_EXT 
.................... void  EXT_isr(void)  
.................... { 
....................    clear_interrupt(INT_EXT); 
*
002F:  BCF    0B.1
....................    enable_interrupts(INT_EXT); 
0030:  BSF    0B.4
0031:  BCF    0B.1
0032:  BCF    0A.3
0033:  GOTO   01E
.................... } 
....................  
.................... void RF_Send(char* ip, int consumo, char sistema) 
.................... {  
....................      printf("%sC%07xS%cF", ip, consumo, sistema); 
*
0048:  MOVF   36,W
0049:  MOVWF  04
004A:  BCF    03.7
004B:  BTFSC  37.0
004C:  BSF    03.7
004D:  MOVLW  00
004E:  IORWF  00,W
004F:  BTFSC  03.2
0050:  GOTO   057
0051:  MOVF   00,W
0052:  BTFSS  0C.4
0053:  GOTO   052
0054:  MOVWF  19
0055:  INCF   04,F
0056:  GOTO   04D
0057:  MOVLW  43
0058:  BTFSS  0C.4
0059:  GOTO   058
005A:  MOVWF  19
005B:  MOVLW  05
005C:  MOVWF  3C
005D:  MOVLW  30
005E:  BTFSS  0C.4
005F:  GOTO   05E
0060:  MOVWF  19
0061:  DECFSZ 3C,F
0062:  GOTO   05D
0063:  MOVF   38,W
0064:  MOVWF  3C
0065:  MOVLW  57
0066:  MOVWF  3D
*
0089:  MOVLW  53
008A:  BTFSS  0C.4
008B:  GOTO   08A
008C:  MOVWF  19
008D:  MOVF   39,W
008E:  BTFSS  0C.4
008F:  GOTO   08E
0090:  MOVWF  19
0091:  MOVLW  46
0092:  BTFSS  0C.4
0093:  GOTO   092
0094:  MOVWF  19
....................      delay_ms(1); 
0095:  MOVLW  01
0096:  MOVWF  3A
0097:  CALL   034
....................      printf(""); 
....................      return; 
0098:  RETURN
.................... } 
....................  
.................... void main() 
0099:  MOVF   03,W
009A:  ANDLW  1F
009B:  MOVWF  03
009C:  MOVLW  67
009D:  BSF    03.5
009E:  MOVWF  19
009F:  MOVLW  A2
00A0:  MOVWF  18
00A1:  MOVLW  90
00A2:  BCF    03.5
00A3:  MOVWF  18
00A4:  CLRF   2E
00A5:  MOVLW  31
00A6:  MOVWF  2F
00A7:  CLRF   30
00A8:  CLRF   31
00A9:  CLRF   32
00AA:  CLRF   34
00AB:  CLRF   33
00AC:  MOVLW  07
00AD:  MOVWF  1F
00AE:  BCF    03.7
.................... {       
....................    ext_int_edge(L_TO_H); 
*
00B8:  BSF    03.5
00B9:  BSF    01.6
....................    clear_interrupt(INT_EXT); 
00BA:  BCF    03.5
00BB:  BCF    0B.1
....................    enable_interrupts(INT_EXT); 
00BC:  BSF    0B.4
....................    delay_ms(10); 
00BD:  MOVLW  0A
00BE:  MOVWF  3A
00BF:  CALL   034
....................     
....................    output_low(PIN_B0); 
00C0:  MOVLW  01
00C1:  BSF    03.5
00C2:  MOVWF  06
00C3:  BCF    03.5
00C4:  BCF    06.0
....................    output_low(PIN_B1); 
00C5:  BSF    03.5
00C6:  MOVWF  06
00C7:  BCF    03.5
00C8:  BCF    06.1
....................    output_low(PIN_B2); 
00C9:  BSF    03.5
00CA:  MOVWF  06
00CB:  BCF    03.5
00CC:  BCF    06.2
....................    output_low(PIN_B3); 
00CD:  BSF    03.5
00CE:  MOVWF  06
00CF:  BCF    03.5
00D0:  BCF    06.3
....................    output_low(PIN_B4); 
00D1:  BSF    03.5
00D2:  MOVWF  06
00D3:  BCF    03.5
00D4:  BCF    06.4
....................    output_low(PIN_B5); 
00D5:  BSF    03.5
00D6:  MOVWF  06
00D7:  BCF    03.5
00D8:  BCF    06.5
....................    output_low(PIN_B6); 
00D9:  BSF    03.5
00DA:  MOVWF  06
00DB:  BCF    03.5
00DC:  BCF    06.6
....................    output_low(PIN_B7); 
00DD:  BSF    03.5
00DE:  MOVWF  06
00DF:  BCF    03.5
00E0:  BCF    06.7
....................    output_low(PIN_A0); 
00E1:  MOVLW  00
00E2:  BSF    03.5
00E3:  MOVWF  05
00E4:  BCF    03.5
00E5:  BCF    05.0
....................    output_low(PIN_A1); 
00E6:  BSF    03.5
00E7:  MOVWF  05
00E8:  BCF    03.5
00E9:  BCF    05.1
....................    output_low(PIN_A2); 
00EA:  BSF    03.5
00EB:  MOVWF  05
00EC:  BCF    03.5
00ED:  BCF    05.2
....................    output_low(PIN_A3); 
00EE:  BSF    03.5
00EF:  MOVWF  05
00F0:  BCF    03.5
00F1:  BCF    05.3
....................    output_low(PIN_A4); 
00F2:  BSF    03.5
00F3:  MOVWF  05
00F4:  BCF    03.5
00F5:  BCF    05.4
....................    output_low(PIN_A5); 
00F6:  BSF    03.5
00F7:  MOVWF  05
00F8:  BCF    03.5
00F9:  BCF    05.5
....................    output_low(PIN_A6); 
00FA:  BSF    03.5
00FB:  MOVWF  05
00FC:  BCF    03.5
00FD:  BCF    05.6
....................    output_low(PIN_A7); 
00FE:  BSF    03.5
00FF:  MOVWF  05
0100:  BCF    03.5
0101:  BCF    05.7
....................    delay_ms(10); 
0102:  MOVLW  0A
0103:  MOVWF  3A
0104:  CALL   034
....................     
....................    for(int x = 0; x < 75; x++) { 
0105:  CLRF   35
0106:  MOVF   35,W
0107:  SUBLW  4A
0108:  BTFSS  03.0
0109:  GOTO   114
....................       RF_Send(ip, consumo, sistema); 
010A:  CLRF   37
010B:  MOVLW  28
010C:  MOVWF  36
010D:  MOVF   2E,W
010E:  MOVWF  38
010F:  MOVF   2F,W
0110:  MOVWF  39
0111:  CALL   048
0112:  INCF   35,F
0113:  GOTO   106
....................    } 
....................     
....................    while(TRUE) 
....................    {/* 
....................       if (contador == 30) { 
....................          for(int x = 0; x < 75; x++) { 
....................             RF_Send(ip, consumo, sistema); 
....................          } 
....................          consumo++; 
....................          contador = 0; 
....................       } 
....................       contador++; 
....................       delay_ms(1000);*/ 
....................       RF_Send(ip, consumo, sistema); 
0114:  CLRF   37
0115:  MOVLW  28
0116:  MOVWF  36
0117:  MOVF   2E,W
0118:  MOVWF  38
0119:  MOVF   2F,W
011A:  MOVWF  39
011B:  CALL   048
011C:  GOTO   114
....................    } 
.................... } 
011D:  SLEEP

Configuration Fuses:
   Word  1: 3F02   NOWDT PUT HS NOMCLR NOBROWNOUT NOLVP NOCPD NOPROTECT
